
/**
 * \page install_on_ubuntu The ASIBOT Software Installation Guide (Ubuntu)

  \li \ref install_cmake \endref
  \li \ref install_yarp \endref
  \li \ref install_openrave \endref
  \li \ref install_eigen2 \endref
  \li \ref install_kdl \endref

  \li \ref install_asibot \endref


 * @section install_cmake Install CMake

Note that you will be prompted for your password upon using '''sudo''' a couple of times:

\verbatim
  sudo apt-get install cmake
  sudo apt-get install cmake-curses-gui  # Needed for ccmake.
\endverbatim


 * @section install_yarp Install YARP

Note that you will be prompted for your password upon using '''sudo''' a couple of times:

\verbatim
  sudo apt-get install build-essential libace-dev subversion
  svn co https://yarp0.svn.sourceforge.net/svnroot/yarp0/trunk/yarp2
  cd yarp2; mkdir build; cd build; cmake ..; make -j3;  sudo make install; cd ../..
\endverbatim

For additional options use ccmake instead of cmake.

Do not forget to set the YARP_DIR environment variable to ''yarp2/build''. There are two ways of doing this:

 1) Through ~/.profile (parsed at system init, persistent throughout entire session). Type <B>echo "export YARP_DIR=$PWD/yarp2/build" >> ~/.profile</B>

 2) Through ~/.baschrc (parsed inside each terminal). Type <B>echo "export YARP_DIR=$PWD/yarp2/build" >> ~/.bashrc</B>


 * @section install_openrave Install OpenRAVE (optional, needed for simulator)

Note that you will be prompted for your password upon using '''sudo''' a couple of times:

\verbatim
  sudo add-apt-repository ppa:openrave/release
  sudo apt-get update
  sudo apt-get install openrave
\endverbatim

If nothing happens, it might not be available on your specific Ubuntu version. You can always compile from source:

\verbatim
  sudo apt-get install libboost-dev  libboost-date-time-dev libboost-thread-dev
  sudo apt-get install libqt4-dev qt4-dev-tools libxml2-dev libode-dev
  sudo apt-get install libsoqt4-dev libcoin60-dev
  sudo apt-get install collada-dom  # Optional collada support.
  svn co https://openrave.svn.sourceforge.net/svnroot/openrave/tags/latest_stable openrave
  cd openrave; mkdir build; cd build; cmake ..; make -j3;  sudo make install; cd ../..
\endverbatim
 
 For OpenRAVE to be found by CMake, it is useful to (change ''x.x'' for 2.6, 2.8, or your CMake version):

\verbatim
  sudo cp openrave/src/cppexamples/FindOpenRAVE.cmake /usr/share/cmake-''x.x''/Modules
\endverbatim


 * @section install_eigen2 Install Eigen2 (optional, needed for KDL)

Note that you will be prompted for your password upon using '''sudo''' a couple of times:

\verbatim
  wget http://bitbucket.org/eigen/eigen/get/2.0.15.tar.bz2 
  tar xvf 2.0.15.tar.bz2
  cd eigen-eigen-2.0.15; mkdir build; cd build; cmake ..
  sudo make install  # Does the job.
  cd ../..
\endverbatim


 * @section install_kdl Install KDL (optional, needed for kinematics)

\verbatim
  wget http://people.mech.kuleuven.be/~rsmits/kdl/orocos-kdl-svn-src.tar.bz
  tar xvf orocos-kdl-svn-src.tar.bz
\endverbatim

In "kdl/config" you'll find a file called "FindEigen2.cmake". Edit its contents for it to point to the installed Eigen2 directory, normally from /usr/include /usr/include/eigen2 to /usr/local/include /usr/local/include/eigen2. For future use, copy it to the CMake Modules path (something like /usr/share/cmake-2.x/Modules). This line would be something like (change the x to your cmake version): 

\verbatim
  sudo cp FindEigen2.cmake /usr/share/cmake-2.x/Modules
\endverbatim

Then you can:

\verbatim
  cd kdl; mkdir build; cd build
  cmake ..; make -j; sudo make install
  cd ../..
\endverbatim

An '''export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib''' in the last line of your ~/.profile (requires reboot) or ~/.bashrc (parsed and only existing inside each shell session) can also be useful.


 * @section install_asibot Download, Configure, Compile and Install the ASIBOT software

 * @subsection download_asibot Download the ASIBOT software repository

\verbatim
  svn co https://roboticslab.svn.sourceforge.net/svnroot/roboticslab/asibot asibot
\endverbatim

 * @subsection configure_asibot Configure the ASIBOT software repository

Set the ASIBOT_ROOT environment variable to ''asibot''. There are two ways of doing this:

 1) Through ~/.profile (parsed at system init, persistent throughout entire session). Type <B>echo "export ASIBOT_ROOT=$PWD/asibot" >> ~/.profile</B>

 2) Through ~/.baschrc (parsed inside each terminal). Type <B>echo "export ASIBOT_ROOT=$PWD/asibot" >> ~/.bashrc</B>

Now let's configure which modules we want to enable:

\verbatim
  cd asibot/main; mkdir build; cd build; ccmake ..
\endverbatim

Press 'c' to refresh the cache. A set of options should be available. The following is a set of the most important ones.

  \li <B>ENABLE_rlPlugins_ravebot</B> (defaults to OFF): 
  

 * @subsection compile_asibot Compile and Install the ASIBOT software repository

Finally compile with:

\verbatim
  make
  make install_applications  # Optional.
\endverbatim

It is highly recommended to set the ASIBOT_DIR environment variable to ''asibot/main/build''. There are two ways of doing this:

 1) Through ~/.profile (parsed at system init, persistent throughout entire session). Type <B>echo "export ASIBOT_DIR=$PWD/asibot/main/build" >> ~/.profile</B>

 2) Through ~/.baschrc (parsed inside each terminal). Type <B>echo "export ASIBOT_DIR=$PWD/asibot/main/build" >> ~/.bashrc</B>

<hr>

The project is organized in such a way that you will find:

 The '''executables''' in build/bin --> will be empty upon basic installation

 The '''shared files''' (models, config files) in build/share

 The '''libraries''' in build/lib

<hr>


=== [http://roboticslab.sourceforge.net/yarpmods/group__RaveBot.html RaveBot] ===


Set ENABLE_rlYarpmods_ravebot ON and compile as usual: (c) (c) (g)

 make -j3

You should have '''test_ravebot''' in your ''bin'' directory if everything went correctly.  You'll need a yarp server running, if you don't, first:

 yarp server

And then, from another terminal, launch:

 $YARPMODS_DIR/bin/test_ravebot --help

For help and options, or launch the actual program:

 $YARPMODS_DIR/bin/test_ravebot

=== [http://roboticslab.sourceforge.net/yarpmods/group__CartesianKontroller.html CartesianKontroller] ===

Install basic dependencies:



Finally compile with:

 cd yarpmods/build

 ccmake ..

Set ENABLE_rlYarpmods_cartesiankontroller ON and compile as usual: (c) (c) (g)

 make -j3

You should have '''test_cartesiankontroller''' in your ''bin'' directory if everything went correctly. You'll need a yarp server running, if you don't, first:

 yarp server

test_cartesiankontroller tries to connect to a remote_controlboard. If you have compiled RaveBot, then, from another terminal, you can launch:

 $YARPMODS_DIR/bin/test_ravebot

And then, from another terminal, launch:

 $YARPMODS_DIR/bin/test_cartesiankontroller

It opens a YARP RPC port which you can connect to by using, from another terminal:

 yarp rpc /cartesiankontroller/ravebot/rpc:i

Here, you can send either 3 doubles (final position) or 7 doubles (final position and orientation using the vector-angle convention), in absolute base space.
 

----
= For using SWIG and therefore Python, Java (-> Matlab), etc... bindings =
To achieve this, (for now) you must export YARMODS to YARP. This can be done by basically:

 cp ~/yarpmods/examples/exportable/ExternalModules.cmake.template ~/yarp2/conf/ExternalModules.cmake

And recompiling YARP with the YARMODS devices you need.

This page can be edited at $ASIBOT_ROOT/main/doc/install.dox.

*
*/

