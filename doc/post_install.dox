
/**
 * \page post_install Now what can I do?

Now that you have installed the basic ASIBOT repository, you're probably wondering what to do.

@section init_comms Initializing the communication server

Our current implementation uses <a class="el" href="http://eris.liralab.it/yarpdoc/what_is_yarp.html">YARP</a> for communication. Basic use of YARP requires the use of a centralized server. This server associates the low-level implementation of the communication ports with the names we give them. Before executing any ASIBOT module or application, please launch a yarp server:

\verbatim
[terminal 1] yarp server
\endverbatim

@section launch_simulator Launching the simulator

The simulator we use for ASIBOT is versatile and multi-layered. You'll learn how to change parameters and implementations of entire layers throughout these tutorials. However, for commodity, we've boundled up a basic pack of robotic joint-space simulator + inverse kinematic solver + inverse kinematic controller with default parameters you can launch with a single command: 

\verbatim
[terminal 2] cartesianServer
\endverbatim

@section changing_parameters Changing parameters

Each layer of ASIBOT modules has parameters that can be modified three different ways. They are parsed in the following order (the second parsing overwrites the first, and the third one overwrites both):

  \li Default parameters defined in the class header files (*.h or *.hpp extension). You must recompile the project if you change any of these parameters.
  \li Configuration files (*.ini or *.xml extension). These files are downloaded from $ASIBOT_ROOT/main/app and installed to $ASIBOT/app with the <i>make install_applications</i> command we issued. Within this folder, separate folders are maintained for modules and module layers.
  \li Command line (on program execution). Parameters may be modified executing a program using the following format: <i>./program --parameter new_value</i>.

Let's say, for example, we have problems with our graphic card and prefer \ref cartesianServer to load an enviroment that does not have cameras in the simulated environment. We can execute the program touching the parameters at the command line level which, as we have said, is parsed last:

\verbatim
[terminal 2] cartesianServer --env asibot_kitchen_cameraless.env.xml
\endverbatim

@section interaction Interacting

We can interact with this module through port commands as described in <a href="group__cartesianServer.html#interfacing">cartesianServer</a>, or through the different language APIs as can be seen in the different <a href="group__asibot__examples.html">ASIBOT examples</a>.

<hr>

This page can be edited at $ASIBOT_ROOT/main/doc/post_install.dox.

*
*/

